{"name":"Ratelimit.js","tagline":"NodeJS library for rate limiting using sliding windows stored in Redis","body":"RateLimit.js\r\n============\r\n[![Build\r\nStatus](https://travis-ci.org/dudleycarr/ratelimit.js.svg)](https://travis-ci.org/dudleycarr/ratelimit.js) [![npm version](https://badge.fury.io/js/ratelimit.js.svg)](http://badge.fury.io/js/ratelimit.js)\r\n\r\nA NodeJS library for efficient rate limiting using sliding windows stored in Redis.\r\n\r\nFeatures\r\n--------\r\n* Uses a sliding window for a rate limit rule\r\n* Multiple rules per instance\r\n* Multiple instances of RateLimit side-by-side for different categories of users.\r\n* Includes Express middleware\r\n\r\nBackground\r\n----------\r\nSee this excellent articles on how the sliding window rate limiting with Redis\r\nworks:\r\n\r\n* [Introduction to Rate Limiting with Redis Part 1](http://www.dr-josiah.com/2014/11/introduction-to-rate-limiting-with.html)\r\n* [Introduction to Rate Limiting with Redis Part 2](http://www.dr-josiah.com/2014/11/introduction-to-rate-limiting-with_26.html)\r\n\r\nInstall\r\n-------\r\n\r\n```\r\nnpm install ratelimit.js\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nBasic example:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar redis = require('redis');\r\n\r\nvar client = redis.createClient();\r\n\r\nvar rules = [\r\n  {interval: 1, limit: 5},\r\n  {interval: 3600, limit: 1000}\r\n  ];\r\nvar limiter = new RateLimit(client, rules);\r\n\r\nvar showRateLimited = function(err, isRateLimited) {\r\n  if (err) {\r\n    return console.log(\"Error: \" + err);\r\n  }\r\n\r\n  console.log(\"Is rate limited? \" + isRateLimited);\r\n};\r\n\r\n// Exceed rate limit.\r\nfor(var i = 0; i < 10; i++) {\r\n  limiter.incr('127.0.0.1', showRateLimited);\r\n}\r\n```\r\n\r\n\r\nOutput:\r\n```\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\n```\r\n\r\nExpress Middleware Usage\r\n------------------------\r\n\r\nConstruct rate limiter and middleware instances:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar ExpressMiddleware = require('ratelimit.js').ExpressMiddleware;\r\nvar redis = require('redis');\r\n\r\nvar rateLimiter = new RateLimit(redis.createClient(), [{interval: 1, limit: 10}]);\r\nvar limitMiddleware = new ExpressMiddleware(rateLimiter);\r\n```\r\n\r\nRate limit every endpoint of an express application:\r\n\r\n```javascript\r\napp.use(limitMiddleware.trackRequests());\r\n\r\napp.use(limitMiddleware.checkRequest(function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n}));\r\n```\r\n\r\nRate limit specific endpoints:\r\n\r\n```javascript\r\napp.use(limitMiddleware.trackRequests());\r\n\r\nvar limitEndpoint = limitMiddleware.checkRequest(function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n});\r\n\r\napp.get('/rate_limited', limitEndpoint, function(req, res, next) {\r\n  // request is not rate limited...\r\n});\r\n\r\napp.post('/another_rate_limited', limitEndpoint, function(req, res, next) {\r\n  // request is not rate limited...\r\n});\r\n```\r\n\r\nDon't want to deny requests that are rate limited? Not sure why, but go ahead:\r\n\r\n```javascript\r\napp.use(limitMiddleware.trackRequests());\r\n\r\napp.use(limitMiddleware.checkRequest(function(req, res, next) {\r\n  req.rateLimited = true;\r\n  next();\r\n}));\r\n```\r\n\r\nUse a custom IP extraction function:\r\n\r\n```javascript\r\nfunction extractIps(req) {\r\n  return req.ips;\r\n}\r\n\r\napp.use(limitMiddleware.trackRequests(extractIps));\r\n\r\napp.use(limitMiddleware.checkRequest(extractIps, function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n}));\r\n```\r\n\r\nNote: this is helpful if your application sits behind a proxy (or set of proxies).\r\n[Read more about express, proxies and req.ips here](http://expressjs.com/guide/behind-proxies.html).\r\n\r\nChangeLog\r\n---------\r\n* **1.1.0**\r\n  * Add Express middleware\r\n  * Updated README\r\n  * Added credits on Lua code\r\n* **1.0.0**\r\n  * Initial RateLimit support\r\n\r\nAuthors\r\n-------\r\n\r\n* [Dudley Carr](https://github.com/dudleycarr)\r\n* [Josh Gummersall](https://github.com/joshgummersall)\r\n","google":"UA-58534323-1","note":"Don't delete this file! It's used internally to help with page regeneration."}